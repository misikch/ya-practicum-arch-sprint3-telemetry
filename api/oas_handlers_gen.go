// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.26.0"
	"go.opentelemetry.io/otel/trace"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
)

// handleDevicesDeviceIDTelemetryGetRequest handles GET /devices/{device_id}/telemetry operation.
//
// Возвращает исторические данные телеметрии для
// устройства за определённый период времени.
//
// GET /devices/{device_id}/telemetry
func (s *Server) handleDevicesDeviceIDTelemetryGetRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		semconv.HTTPRequestMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/devices/{device_id}/telemetry"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "DevicesDeviceIDTelemetryGet",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Add Labeler to context.
	labeler := &Labeler{attrs: otelAttrs}
	ctx = contextWithLabeler(ctx, labeler)

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		attrOpt := metric.WithAttributeSet(labeler.AttributeSet())

		// Increment request counter.
		s.requests.Add(ctx, 1, attrOpt)

		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), attrOpt)
	}()

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributeSet(labeler.AttributeSet()))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "DevicesDeviceIDTelemetryGet",
			ID:   "",
		}
	)
	params, err := decodeDevicesDeviceIDTelemetryGetParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response DevicesDeviceIDTelemetryGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "DevicesDeviceIDTelemetryGet",
			OperationSummary: "Получение исторических данных телеметрии",
			OperationID:      "",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "device_id",
					In:   "path",
				}: params.DeviceID,
				{
					Name: "from",
					In:   "query",
				}: params.From,
				{
					Name: "to",
					In:   "query",
				}: params.To,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = DevicesDeviceIDTelemetryGetParams
			Response = DevicesDeviceIDTelemetryGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackDevicesDeviceIDTelemetryGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.DevicesDeviceIDTelemetryGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.DevicesDeviceIDTelemetryGet(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeDevicesDeviceIDTelemetryGetResponse(response, w, span); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleDevicesDeviceIDTelemetryLatestGetRequest handles GET /devices/{device_id}/telemetry/latest operation.
//
// Возвращает последнее полученное значение телеметрии
// для устройства.
//
// GET /devices/{device_id}/telemetry/latest
func (s *Server) handleDevicesDeviceIDTelemetryLatestGetRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		semconv.HTTPRequestMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/devices/{device_id}/telemetry/latest"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "DevicesDeviceIDTelemetryLatestGet",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Add Labeler to context.
	labeler := &Labeler{attrs: otelAttrs}
	ctx = contextWithLabeler(ctx, labeler)

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		attrOpt := metric.WithAttributeSet(labeler.AttributeSet())

		// Increment request counter.
		s.requests.Add(ctx, 1, attrOpt)

		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), attrOpt)
	}()

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributeSet(labeler.AttributeSet()))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "DevicesDeviceIDTelemetryLatestGet",
			ID:   "",
		}
	)
	params, err := decodeDevicesDeviceIDTelemetryLatestGetParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response DevicesDeviceIDTelemetryLatestGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "DevicesDeviceIDTelemetryLatestGet",
			OperationSummary: "Получение последних данных телеметрии",
			OperationID:      "",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "device_id",
					In:   "path",
				}: params.DeviceID,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = DevicesDeviceIDTelemetryLatestGetParams
			Response = DevicesDeviceIDTelemetryLatestGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackDevicesDeviceIDTelemetryLatestGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.DevicesDeviceIDTelemetryLatestGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.DevicesDeviceIDTelemetryLatestGet(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeDevicesDeviceIDTelemetryLatestGetResponse(response, w, span); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleDevicesDeviceIDTelemetryPostRequest handles POST /devices/{device_id}/telemetry operation.
//
// Позволяет добавить данные телеметрии для устройства.
//
// POST /devices/{device_id}/telemetry
func (s *Server) handleDevicesDeviceIDTelemetryPostRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		semconv.HTTPRequestMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/devices/{device_id}/telemetry"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "DevicesDeviceIDTelemetryPost",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Add Labeler to context.
	labeler := &Labeler{attrs: otelAttrs}
	ctx = contextWithLabeler(ctx, labeler)

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		attrOpt := metric.WithAttributeSet(labeler.AttributeSet())

		// Increment request counter.
		s.requests.Add(ctx, 1, attrOpt)

		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), attrOpt)
	}()

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributeSet(labeler.AttributeSet()))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "DevicesDeviceIDTelemetryPost",
			ID:   "",
		}
	)
	params, err := decodeDevicesDeviceIDTelemetryPostParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeDevicesDeviceIDTelemetryPostRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response DevicesDeviceIDTelemetryPostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "DevicesDeviceIDTelemetryPost",
			OperationSummary: "Добавление данных телеметрии",
			OperationID:      "",
			Body:             request,
			Params: middleware.Parameters{
				{
					Name: "device_id",
					In:   "path",
				}: params.DeviceID,
			},
			Raw: r,
		}

		type (
			Request  = *DevicesDeviceIDTelemetryPostReq
			Params   = DevicesDeviceIDTelemetryPostParams
			Response = DevicesDeviceIDTelemetryPostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackDevicesDeviceIDTelemetryPostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.DevicesDeviceIDTelemetryPost(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.DevicesDeviceIDTelemetryPost(ctx, request, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeDevicesDeviceIDTelemetryPostResponse(response, w, span); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}
