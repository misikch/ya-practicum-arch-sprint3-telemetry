// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DevicesDeviceIDTelemetryGet implements GET /devices/{device_id}/telemetry operation.
	//
	// Возвращает исторические данные телеметрии для
	// устройства за определённый период времени.
	//
	// GET /devices/{device_id}/telemetry
	DevicesDeviceIDTelemetryGet(ctx context.Context, params DevicesDeviceIDTelemetryGetParams) (DevicesDeviceIDTelemetryGetRes, error)
	// DevicesDeviceIDTelemetryLatestGet implements GET /devices/{device_id}/telemetry/latest operation.
	//
	// Возвращает последнее полученное значение телеметрии
	// для устройства.
	//
	// GET /devices/{device_id}/telemetry/latest
	DevicesDeviceIDTelemetryLatestGet(ctx context.Context, params DevicesDeviceIDTelemetryLatestGetParams) (DevicesDeviceIDTelemetryLatestGetRes, error)
	// DevicesDeviceIDTelemetryPost implements POST /devices/{device_id}/telemetry operation.
	//
	// Позволяет добавить данные телеметрии для устройства.
	//
	// POST /devices/{device_id}/telemetry
	DevicesDeviceIDTelemetryPost(ctx context.Context, req *DevicesDeviceIDTelemetryPostReq, params DevicesDeviceIDTelemetryPostParams) (DevicesDeviceIDTelemetryPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
