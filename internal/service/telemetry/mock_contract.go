// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=mock_contract.go -package=telemetry
//

// Package telemetry is a generated GoMock package.
package telemetry

import (
	context "context"
	entity "device-manager/internal/entity"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddTelemetry mocks base method.
func (m *MockStorage) AddTelemetry(ctx context.Context, deviceId, deviceType string, createdAt time.Time, telemetryData string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTelemetry", ctx, deviceId, deviceType, createdAt, telemetryData)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTelemetry indicates an expected call of AddTelemetry.
func (mr *MockStorageMockRecorder) AddTelemetry(ctx, deviceId, deviceType, createdAt, telemetryData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTelemetry", reflect.TypeOf((*MockStorage)(nil).AddTelemetry), ctx, deviceId, deviceType, createdAt, telemetryData)
}

// GetDeviceById mocks base method.
func (m *MockStorage) GetDeviceById(ctx context.Context, deviceId string) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceById", ctx, deviceId)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceById indicates an expected call of GetDeviceById.
func (mr *MockStorageMockRecorder) GetDeviceById(ctx, deviceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceById", reflect.TypeOf((*MockStorage)(nil).GetDeviceById), ctx, deviceId)
}

// GetHistoricalTelemetry mocks base method.
func (m *MockStorage) GetHistoricalTelemetry(ctx context.Context, deviceId string, from, to time.Time) ([]entity.TelemetryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalTelemetry", ctx, deviceId, from, to)
	ret0, _ := ret[0].([]entity.TelemetryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalTelemetry indicates an expected call of GetHistoricalTelemetry.
func (mr *MockStorageMockRecorder) GetHistoricalTelemetry(ctx, deviceId, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalTelemetry", reflect.TypeOf((*MockStorage)(nil).GetHistoricalTelemetry), ctx, deviceId, from, to)
}

// GetLatestTelemetry mocks base method.
func (m *MockStorage) GetLatestTelemetry(ctx context.Context, deviceId string) (*entity.TelemetryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTelemetry", ctx, deviceId)
	ret0, _ := ret[0].(*entity.TelemetryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTelemetry indicates an expected call of GetLatestTelemetry.
func (mr *MockStorageMockRecorder) GetLatestTelemetry(ctx, deviceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTelemetry", reflect.TypeOf((*MockStorage)(nil).GetLatestTelemetry), ctx, deviceId)
}

// MockDatabusProducer is a mock of DatabusProducer interface.
type MockDatabusProducer struct {
	ctrl     *gomock.Controller
	recorder *MockDatabusProducerMockRecorder
}

// MockDatabusProducerMockRecorder is the mock recorder for MockDatabusProducer.
type MockDatabusProducerMockRecorder struct {
	mock *MockDatabusProducer
}

// NewMockDatabusProducer creates a new mock instance.
func NewMockDatabusProducer(ctrl *gomock.Controller) *MockDatabusProducer {
	mock := &MockDatabusProducer{ctrl: ctrl}
	mock.recorder = &MockDatabusProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabusProducer) EXPECT() *MockDatabusProducerMockRecorder {
	return m.recorder
}

// PublishTelemetry mocks base method.
func (m *MockDatabusProducer) PublishTelemetry(ctx context.Context, msg entity.TelemetryData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTelemetry", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTelemetry indicates an expected call of PublishTelemetry.
func (mr *MockDatabusProducerMockRecorder) PublishTelemetry(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTelemetry", reflect.TypeOf((*MockDatabusProducer)(nil).PublishTelemetry), ctx, msg)
}
